
let fName = 'Vikas';
const lName = 'Mishra';
const name = `${lName} ${fName}`;

function funcName(param1 = "default value") {
	...
}

//anonymous function
const funcName = function() {
    return " ";
}

//Arrow Function
const funcName = (params) => {
    return ;
}

const dinnerMenu = params => `I'm going to eat a ${params} for dinner`;

typeof name;
console.log(name.split(' '));

let example = 8.2;
let ex2 = example.toFixed(2); //8.20  //string 

Boolean()

let arrayName = [];
arrayName.push(8, 9, 10);
arrayName.pop();

arrayName.forEach((element) => {
	console.log(element)
});

let objName = {
	var1: val1,
	var2: [],
	var3: {
		...
	}	
}
objName.var1;
Object.keys(objName); //['var1', 'var2', 'var3', ..]
Object.values(objName);
objName.hasOwnProperty('var1'); //true

const { var1, var2, var3: {} } = objName;  // Destructuring objects
console.log(var1); //val1

=== // check value and datatype // strictly equal
== // check value is true // loosely equal

let [var1, var2] = ['va1', 'val2', 'val3']

for (let x of iterables){ .... }

let copy = ["newVal1", ...original ]; // ...org //spread operator

// rest operator

// .includes() function return boolean value whether item exist or not

export const data = ...;   // example.js
import { data } from './example.js';


export class Animal {
    constructor(type, legs) {
        this.type = type;
        this.legs = legs;
    }
    
    makeNoise(sound = 'Loud Noise') {
        console.log(sound);
    }
    
    get metaData() {
        return `Type: ${this.type}, Legs: ${this.legs}`;
    }
    
    static return10() {
        return 10;
    }
}

export class Cat extends Animal {
    makeNoise(sound = "meow") {
        console.log(sound);
    }
}

import { Animal, Cat } from './animal.js';
let cat = new Cat('Cat', 4);
cat.makeNoise();
console.log(cat.metaData)

const buyFlightTicket = () => {
    return new Promise( (resolve, reject) => {
        setTimeout( () => {
            const error = true;
            
            if( error ) {
                reject("Sorry your payment was not successful")
            } else {
                resolve("Thank you, your payment was successful");
            }
        }, 3000)
    })
}
buyFlightTicket()
.then( (success) => console.log(success))
.catch( (error) => console.log(error) );

fetch('https://jsonplaceholder.typicode.com/comments/1')
    .then(response => response.json())
    .then(data => console.log(data))

fetch('https://jsonplaceholder.typicode.com/comments', {
        method: "POST",
        body: JSON.stringify({
            postId: 1,
            name: 'Dylan',
            email: 'dylansemail310@gmail.com',
            body: 'That was dope!'
        })
    })
    .then(response => response.json())
    .then(data => console.log(data))

const photos = [];
async function photoUpload() {
    let uploadStatus = new Promise( (resolve, reject) => {
        setTimeout( () => {
            photos.push("Profile Pic");
            resolve("Photo Uploaded")
        }, 3000)
    })
    
    let result = await uploadStatus;
    
    console.log(result);
    console.log(photos.length);
}
photoUpload();

const exampleSet = new Set([1,1,1,1,2,2,2,2]);
exampleSet.add(5).add(17);
exampleSet.delete(5);
console.log(exampleSet.has(5));
exampleSet.clear();
console.log(exampleSet.size);



















